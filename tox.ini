# we are using this file tox.ini to test our code in local environment or development environment, so by just performing the CI or continous integrating on code by using github and github  has one service which is called github action so by using the github action iam going to performe the Continuous Integration which is CI to integrate my code so after done with CI by writing the github action in this tox.ini file so that github action code helps us to test our code in local or develping environemnt 
[tox]
envlist = python3.7, python3.8, python3.9

[gh-actions] # here in this list we mention our github action  and below mention some python environments so our github creates python environment based on which python version we are using to write the code
python =  # here we written the different versions of the python basically it means our github creates below  python version related separate environments like below there are python versions are there so our github creates the 3 separate environments so while writing the code in among of those python version which we mentioned in our github action our github checks our code python version whether we are using the same python version that we mention in our github action or  not  and 
    3.7: python3.7
    3.8: python3.8
    3.9: python3.9

[testenv] # so after done with the first step which is creating the python version related environment our github action perform the 2nd step which is testenv by following the below github action commands
deps = -rrequirements_dev.txt # so when the above mentioned python version environemnt got created then we will install the dependencies or required libraries for to use created python version environment  so that we can develop the product by using that python version language
commands =  # then after our github going to run these below commands to test the pyton code which we used to develop product or package
    # stop the build if there are Python syntax errors or undefined names
    flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics # here in the folder of src iam going to use flake8 which is just a linting tool which this linting tools helps us test our written python code  is following the some sort of protocols or not , --count in which --  is the command line argument if i want to write with single letter then i will use single command argument which is for example -c so if i want to full command then i will use 2 lines which is --count and then we select E9,F63,F7,F82 by using this --select command actually this E9,F63,F7,F82 these we can find them in PEP which is a foundation of python and this PEP is managing the python , so lets say whatever the development is going regarding this  python  so for that they actually mention some protocals interms of this codes E9,F63,F7,F82 if we check the github action documentation then we wil understand this codes 
    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics 
    # type linting
    mypy src/   # so till here which flake8 mypy are lenting tools which tests our python code which we written for creating a package or product
    # pytest unit
    pytest -v tests/unit  # Here iam performing the unit testing by using module name as pytest which means our pytest module check the written python code which we written in different components like from data ingestion to model evaluation so there are 5 components so our pytest module tests python code of the components individually and -v means verbose which helps in like whatever the execution is happing in the backend while testing our code in different components this version which is -v helps us see that backend execution in the screen
    # pytest integration
    pytest -v tests/integration # Here iam performing the integrating testing by using module name as pytest which means our pytest module check the written python code which we written in different components like from data ingestion to model evaluation so there are 5 components ,so our pytest module tests python code of the components  and -v means verbose which helps in like whatever the execution is happing in the backend while testing our code in different components this version which is -v helps us see that backend execution in the screen
